	ORI				THIS
--------------------------------
data_utils        data_utils
+augmentor        |
+__init__.py   =  +__init__.py
+audio.py      =  +audio.py
+collate_fn.py >> |
+featurizer.py =  +featurizer.py
+reader.py     >> |
\utils.py      =  \utils.py
metric
+__init__.py   >>
\metrics.py    >>
models            models
+__init__.py   =  +__init__.py
+ecapa_tdnn.py =  +ecapa_tdnn.py
+fc.py         =  +fc.py
+loss.py       =  +loss.py
+pooling.py    =  +pooling.py
+res2net.py    =  +res2net.py
+resnet_se.py  =  +resnet_se.py
\tdnn.py       =  \tdnn.py
utils             utils
+__init__.py   =  +__init__.py
+logger.py     =  +logger.py
+record.py     >> |
\utils.py      <> \utils.py
__init__.py    =  __init__.py
predict.py     <> predict.py
trainer.py     >>
--------------------------------

File： utils\utils.py
 6 from mvector.utils.logger import setup_logger                           +-
 7
 8 logger = setup_logger(__name__)
 9
10
11 def print_arguments(args=None, configs=None):
12     if args:
13         logger.info("----------- 额外配置参数 -----------")
14         for arg, value in sorted(vars(args).items()):
15             logger.info("%s: %s" % (arg, value))
16         logger.info("------------------------------------------------")
17     if configs:
18         logger.info("----------- 配置文件参数 -----------")
19         for arg, value in sorted(configs.items()):
20             if isinstance(value, dict):
21                 logger.info(f"{arg}:")
22                 for a, v in sorted(value.items()):
23                     if isinstance(v, dict):
24                         logger.info(f"\t{a}:")
25                         for a1, v1 in sorted(v.items()):
26                             logger.info("\t\t%s: %s" % (a1, v1))
27                     else:
28                         logger.info("\t%s: %s" % (a, v))
29             else:
30                 logger.info("%s: %s" % (arg, value))
31         logger.info("------------------------------------------------")
32
33
34 def add_arguments(argname, type, default, help, argparser, **kwargs):
35     type = distutils.util.strtobool if type == bool else type
36     argparser.add_argument("--" + argname,
37                            default=default,
38                            type=type,
39                            help=help + ' 默认: %(default)s.',
40                            **kwargs)
41
-------------------------------------------------------------------------------

File： predict.py
  2 import pickle                                                                                                +-
  3 import shutil
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 21 from mvector.utils.utils import dict_to_object, print_arguments                                              <>  19 from mvector.utils.utils import dict_to_object
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 30                  audio_db_path=None,                                                                         <>  28                  label_path=None,
 31                  model_path='models/ecapa_tdnn_spectrogram/best_model/',                                         29                  model_path='./model',
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 37         :param audio_db_path: 声纹库路径                                                                          <>  35         :param label_path: 声纹库路径
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 42             assert (torch.cuda.is_available()), 'GPU不可用'                                                     <>  40             assert (torch.cuda.is_available()), 'GPU not available.'
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 54             print_arguments(configs=configs)                                                                 +-
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 57             '【警告】，您貌似使用了旧的配置文件，如果你同时使用了旧的模型，这是错误的，请重新下载或者重新训练，否则只能回滚代码。'                                     <>  54             'You are using an old version of model which is no longer supported.'
 58         assert self.configs.use_model in SUPPORT_MODEL, f'没有该模型：{self.configs.use_model}'                        55         assert self.configs.use_model in SUPPORT_MODEL, f'Model not existed：{self.configs.use_model}'
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 71             raise Exception(f'{self.configs.use_model} 模型不存在！')                                              <>  68             raise Exception(f'{self.configs.use_model} model not existed!')
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 77         assert os.path.exists(model_path), f"{model_path} 模型不存在！"                                            <>  74         assert os.path.exists(model_path), f"{model_path} model not existed!"
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 83         print(f"成功加载模型参数：{model_path}")                                                                      <>  80         print(f"Model loaded successfully：{model_path}")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 94         self.audio_db_path = audio_db_path                                                                   <>  91         self.audio_db_path = label_path
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 96             self.audio_indexes_path = os.path.join(audio_db_path, "audio_indexes.bin")                       +-
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
100     # 加载声纹特征索引                                                                                               +-
101     def __load_face_indexes(self):
102         # 如果存在声纹特征索引文件就加载
103         if not os.path.exists(self.audio_indexes_path): return
104         with open(self.audio_indexes_path, "rb") as f:
105             indexes = pickle.load(f)
106         self.users_name = indexes["users_name"]
107         self.audio_feature = indexes["faces_feature"]
108         self.users_audio_path = indexes["users_image_path"]
109
110     # 保存声纹特征索引
111     def __write_index(self):
112         with open(self.audio_indexes_path, "wb") as f:
113             pickle.dump({"users_name": self.users_name,
114                          "faces_feature": self.audio_feature,
115                          "users_image_path": self.users_audio_path}, f)
116
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
120         self.__load_face_indexes()                                                                           +-
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
125             if not os.path.isdir(audio_dir):continue                                                         <> 103             if not os.path.isdir(audio_dir): continue
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
130         logger.info('正在加载声纹库数据...')                                                                          <> 108         print("Loading voice feature library...")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
157         assert len(self.audio_feature) == len(self.users_name) == len(self.users_audio_path), '加载的数量对不上！'    <> 135         assert len(self.audio_feature) == len(self.users_name) == len(self.users_audio_path), 'Labels count conflict.'
158         # 将声纹特征保存到索引文件中                                                                                         136         print("Voice feature library loaded successfully.")
159         self.__write_index()
160         logger.info('声纹库数据加载完成！')
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
164         labels = []                                                                                          <> 140         results = []
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
179                 max_label = None                                                                             <> 155                 results.append({"label": None, "similarity": None})
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
182             labels.append(max_label)                                                                         <> 158                 idx_for_max_label = [i for i, x in enumerate(self.users_name) if x == max_label]
                                                                                                                    159                 similarity_for_max_label = max(abs_similarity[idx_for_max_label])
                                                                                                                    160                 results.append({"label": max_label, "similarity": similarity_for_max_label})
183         return labels                                                                                           161         return results
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
203             f'音频太短，最小应该为{self.configs.dataset_conf.min_duration}s，当前音频为{audio_segment.duration}s'            <> 181             f'Audio segment too short，minimum is {self.configs.dataset_conf.min_duration}s，current is{audio_segment.duration}s'
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
254             input_lens_ratio.append(seq_length/max_audio_length)                                             <> 232             input_lens_ratio.append(seq_length / max_audio_length)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
262     # 声纹对比                                                                                                   +-
263     def contrast(self, audio_data1, audio_data2):
264         feature1 = self.predict(audio_data1)
265         feature2 = self.predict(audio_data2)
266         # 对角余弦值
267         dist = np.dot(feature1, feature2) / (np.linalg.norm(feature1) * np.linalg.norm(feature2))
268         return dist
269
270     def register(self,
271                  user_name,
272                  audio_data,
273                  sample_rate=16000):
274         """声纹注册
275         :param user_name: 注册用户的名字
276         :param audio_data: 需要识别的数据，支持文件路径，文件对象，字节，numpy。如果是字节的话，必须是完整的字节文件
277         :param sample_rate: 如果传入的事numpy数据，需要指定采样率
278         :return: 识别的文本结果和解码的得分数
279         """
280         # 加载音频文件
281         if isinstance(audio_data, str):
282             audio_segment = AudioSegment.from_file(audio_data)
283         elif isinstance(audio_data, BufferedReader):
284             audio_segment = AudioSegment.from_file(audio_data)
285         elif isinstance(audio_data, np.ndarray):
286             audio_segment = AudioSegment.from_ndarray(audio_data, sample_rate)
287         elif isinstance(audio_data, bytes):
288             audio_segment = AudioSegment.from_bytes(audio_data)
289         else:
290             raise Exception(f'不支持该数据类型，当前数据类型为：{type(audio_data)}')
291         feature = self.predict(audio_data=audio_segment.samples, sample_rate=audio_segment.sample_rate)
292         if self.audio_feature is None:
293             self.audio_feature = feature
294         else:
295             self.audio_feature = np.vstack((self.audio_feature, feature))
296         # 保存
297         if not os.path.exists(os.path.join(self.audio_db_path, user_name)):
298             audio_path = os.path.join(self.audio_db_path, user_name, '0.wav')
299         else:
300             audio_path = os.path.join(self.audio_db_path, user_name,
301                                       f'{len(os.listdir(os.path.join(self.audio_db_path, user_name)))}.wav')
302         os.makedirs(os.path.dirname(audio_path), exist_ok=True)
303         audio_segment.to_wav_file(audio_path)
304         self.users_audio_path.append(audio_path.replace('\\', '/'))
305         self.users_name.append(user_name)
306         self.__write_index()
307         return True, "注册成功"
308
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
319         name = self.__retrieval(np_feature=[feature])[0]                                                     <> 250         result = self.__retrieval(np_feature=[feature])[0]
320         return name
321
322     def remove_user(self, user_name):
323         """删除用户
324
325         :param user_name: 用户名
326         :return:
327         """
328         if user_name in self.users_name:                                                                        251         return result["label"], result["similarity"]
329             indexes = [i for i in range(len(self.users_name)) if self.users_name[i] == user_name]
330             for index in sorted(indexes, reverse=True):
331                 del self.users_name[index]
332                 del self.users_audio_path[index]
333                 self.audio_feature = np.delete(self.audio_feature, index, axis=0)
334             self.__write_index()
335             shutil.rmtree(os.path.join(self.audio_db_path, user_name))
336             return True
337         else:
338             return False
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

